import IBlockchain from './interfaces/IBlockchain';
import IConfirmationStore from './interfaces/IConfirmationStore';
import IOperationStore from './interfaces/IOperationStore';
import ITransactionStore from './interfaces/ITransactionStore';
import IUnresolvableTransactionStore from './interfaces/IUnresolvableTransactionStore';
import IVersionManager from './interfaces/IVersionManager';
export default class Observer {
    private versionManager;
    private blockchain;
    private maxConcurrentDownloads;
    private operationStore;
    private transactionStore;
    private unresolvableTransactionStore;
    private confirmationStore;
    private observingIntervalInSeconds;
    private continuePeriodicProcessing;
    private transactionsUnderProcessing;
    private cursorTransaction;
    private throughputLimiter;
    constructor(versionManager: IVersionManager, blockchain: IBlockchain, maxConcurrentDownloads: number, operationStore: IOperationStore, transactionStore: ITransactionStore, unresolvableTransactionStore: IUnresolvableTransactionStore, confirmationStore: IConfirmationStore, observingIntervalInSeconds: number);
    startPeriodicProcessing(): Promise<void>;
    stopPeriodicProcessing(): void;
    private processTransactions;
    private static getCountOfTransactionsUnderProcessing;
    private hasErrorInTransactionProcessing;
    private static waitUntilCountOfTransactionsUnderProcessingIsLessOrEqualTo;
    private processUnresolvableTransactions;
    private storeThenTrimConsecutiveTransactionsProcessed;
    private processTransaction;
    private revertInvalidTransactions;
}
