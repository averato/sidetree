import BitcoinClient from '../BitcoinClient';
import LockResolver from './LockResolver';
import MongoDbLockTransactionStore from './MongoDbLockTransactionStore';
import ValueTimeLockModel from './../../common/models/ValueTimeLockModel';
import VersionManager from '../VersionManager';
export default class LockMonitor {
    private bitcoinClient;
    private lockTransactionStore;
    private lockResolver;
    private pollPeriodInSeconds;
    private valueTimeLockUpdateEnabled;
    private desiredLockAmountInSatoshis;
    private transactionFeesAmountInSatoshis;
    private versionManager;
    private periodicPollTimeoutId;
    constructor(bitcoinClient: BitcoinClient, lockTransactionStore: MongoDbLockTransactionStore, lockResolver: LockResolver, pollPeriodInSeconds: number, valueTimeLockUpdateEnabled: boolean, desiredLockAmountInSatoshis: number, transactionFeesAmountInSatoshis: number, versionManager: VersionManager);
    startPeriodicProcessing(): Promise<void>;
    getCurrentValueTimeLock(): Promise<ValueTimeLockModel | undefined>;
    private periodicPoll;
    private handlePeriodicPolling;
    private getCurrentLockState;
    private rebroadcastTransaction;
    private isTransactionBroadcasted;
    private handleCreatingNewLock;
    private handleExistingLockRenewal;
    private handleReleaseExistingLock;
    private renewLock;
    private releaseLock;
    private saveThenBroadcastTransaction;
    private isUnlockTimeReached;
}
